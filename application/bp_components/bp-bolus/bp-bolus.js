// Generated by CoffeeScript 1.8.0
(function() {
  var CarbohydratesUnit, DataLine, DataLinesStorage, GlucoseUnit, LanguageUnit, UnitStorageData, carbohydratesUnit, disclaimerUnit, glucoseUnit, languageUnit,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  UnitStorageData = (function(_super) {
    __extends(UnitStorageData, _super);

    function UnitStorageData(name, unit) {
      UnitStorageData.__super__.constructor.call(this, name, {
        selected: false,
        unit: unit
      });
    }

    UnitStorageData.prototype.isSelected = function() {
      return this.data.selected;
    };

    UnitStorageData.prototype.setUnit = function(unit) {
      this.data.selected = true;
      this.data.unit = unit;
      return this.save();
    };

    UnitStorageData.prototype.getUnit = function() {
      return this.data.unit;
    };

    UnitStorageData.prototype.getId = function() {
      return this.getUnit().id;
    };

    UnitStorageData.prototype.getCurrentStep = function() {
      return this.getUnit().step;
    };

    UnitStorageData.asUnit = function(id) {
      return {
        id: id
      };
    };

    return UnitStorageData;

  })(StorageData);

  LanguageUnit = (function(_super) {
    __extends(LanguageUnit, _super);

    function LanguageUnit() {
      return LanguageUnit.__super__.constructor.apply(this, arguments);
    }

    LanguageUnit.LANGUAGES = {
      "en": {
        "language-en": "English",
        "language-de": "Deutsch",
        "language-es": "Español",
        "hour": "hour",
        "editHour": "Aggregated time range",
        "glucoseMinimum": "Target glucose in a few hours",
        "insulinPerCarbohydrates": "Insulin per carbohydrate unit",
        "glucosePerInsulin": "Glucose reduction per insulin unit",
        "glucosePerCarbohydrates": "Glucose increase per carbohydrate unit",
        "glucose": "Current glucose",
        "carbohydrates": "Targeted carbohydrate units",
        "step": "Step",
        "stepOf": "of",
        "languageQuestion": "Prefered language",
        "languageExplanation": "",
        "disclaimerTitle": "Disclaimer",
        "disclaimer": "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "chooseMoreInfo": "More info...",
        "chooseDecline": "Decline",
        "chooseAccept": "Accept",
        "glucoseUnitQuestion": "Which glucose measurement unit is the right for you?",
        "glucoseUnitExplanation": "Which glucose measurement unit is the right for you?",
        "carbohydratesUnitQuestion": "Which unit do you prefer for your carbohydrates?",
        "carbohydratesUnitExplanation": "Which unit do you prefer for your carbohydrates?"
      },
      "de": {
        "hour": "Stunde",
        "editHour": "Aggregierte Uhrzeit",
        "glucoseMinimum": "Zielglukosespiegel",
        "insulinPerCarbohydrates": "Insulin pro Broteinheit",
        "glucosePerInsulin": "Glukosereduktion pro I.E.",
        "glucosePerCarbohydrates": "Glukoseanstieg pro B.E.",
        "glucose": "Aktueller Glukosewert",
        "carbohydrates": "Gewünschte B.E.",
        "step": "Schritt",
        "stepOf": "von",
        "disclaimerTitle": "Wichtiger Hinweis",
        "chooseMoreInfo": "Mehr Infos...",
        "chooseDecline": "Ablehnen",
        "chooseAccept": "Akzeptieren",
        "glucoseUnitQuestion": "Bevorzugte Glukoseeinheit",
        "glucoseUnitExplanation": "Die Glukoseeinheit wird in der Regel auf dem Display Ihres Messgerätes angegeben. In Deutschland ist die häufigst verwendete Glukoseeinheit mg/dL.",
        "carbohydratesUnitQuestion": "Bevorzugte Kohlenhydrateinheit",
        "carbohydratesUnitExplanation": "In Deutschland ist die häufigst verwendete Kohlenhydrateinheit die Broteinheit mit 12 mg pro Portion."
      },
      "es": {
        "hour": "hora",
        "editHour": "Agregada hora del día",
        "glucoseMinimum": "Target valor de glucosa",
        "insulinPerCarbohydrates": "La insulina por unidad de pan",
        "glucosePerInsulin": "Reducción de glucosa por I.E.",
        "glucosePerCarbohydrates": "Aumento de glucosa por B.E.",
        "glucose": "Valor actual de glucosa",
        "carbohydrates": "Carbohidratos",
        "step": "Paso",
        "stepOf": "de los",
        "disclaimerTitle": "Nota importante",
        "chooseMoreInfo": "Más Infos...",
        "chooseDecline": "Rechazar",
        "chooseAccept": "Aceptar",
        "glucoseUnitQuestion": "Unidad de glucosa preferida",
        "glucoseUnitExplanation": "",
        "carbohydratesUnitQuestion": "Resto de carbohidrato preferidos",
        "carbohydratesUnitExplanation": ""
      }
    };

    LanguageUnit.prototype.getText = function(code) {
      var text;
      text = LanguageUnit.LANGUAGES[this.getId()][code];
      if (text != null) {
        return text;
      } else {
        text = LanguageUnit.LANGUAGES["en"][code];
        if (text != null) {
          return text;
        } else {
          Log.warn("LanguageUnit: '" + code + "' not found");
          return "(" + code + " not found)";
        }
      }
    };

    LanguageUnit.getLanguageIds = function() {
      return Object.keys(LanguageUnit.LANGUAGES);
    };

    return LanguageUnit;

  })(UnitStorageData);

  languageUnit = new LanguageUnit("LanguageUnit", UnitStorageData.asUnit("en"));

  disclaimerUnit = new UnitStorageData("DisclaimerUnit", {});

  GlucoseUnit = (function(_super) {
    __extends(GlucoseUnit, _super);

    function GlucoseUnit() {
      return GlucoseUnit.__super__.constructor.apply(this, arguments);
    }

    GlucoseUnit.MMOL_L = {
      id: "mmol/l",
      step: 0.25
    };

    GlucoseUnit.MG_DL = {
      id: "mg/dl",
      step: 5
    };

    GlucoseUnit.prototype.to_mmol_l = function(mg_dl) {
      return Mathx.rounded(mg_dl * 0.0555, GlucoseUnit.MMOL_L.step);
    };

    GlucoseUnit.prototype.to_mg_dl = function(mmol_l) {
      return Mathx.rounded(mmol_l * 18.0182, GlucoseUnit.MG_DL.step);
    };

    GlucoseUnit.prototype["switch"] = function(glucoseUnit, glucose) {
      if (glucoseUnit === GlucoseUnit.MG_DL) {
        return this.to_mg_dl(glucose);
      } else {
        return this.to_mmol_l(glucose);
      }
    };

    GlucoseUnit.prototype.mgdlToCurrent = function(glucoseInMgPerDL) {
      if (this.getId() === GlucoseUnit.MG_DL.id) {
        return glucoseInMgPerDL;
      } else {
        return this.to_mmol_l(glucoseInMgPerDL);
      }
    };

    return GlucoseUnit;

  })(UnitStorageData);

  glucoseUnit = new GlucoseUnit("GlucoseUnit", GlucoseUnit.MG_DL);

  CarbohydratesUnit = (function(_super) {
    __extends(CarbohydratesUnit, _super);

    function CarbohydratesUnit() {
      return CarbohydratesUnit.__super__.constructor.apply(this, arguments);
    }

    CarbohydratesUnit.MG_1 = {
      id: "1 mg",
      factor: 1,
      step: 5,
      min: 0,
      max: 15 * 12,
      insulinPerCarbohydrates: {
        "default": 0.08,
        step: 0.01,
        min: 0.01,
        max: 1.60
      }
    };

    CarbohydratesUnit.MG_10 = {
      id: "10 mg",
      factor: 10,
      step: 0.25,
      min: 0,
      max: 15 * 12 / 10,
      insulinPerCarbohydrates: {
        "default": 0.85,
        step: 0.05,
        min: 0.05,
        max: 18.0
      }
    };

    CarbohydratesUnit.MG_12 = {
      id: "12 mg",
      factor: 12,
      step: 0.25,
      min: 0,
      max: 15,
      insulinPerCarbohydrates: {
        "default": 1.0,
        step: 0.1,
        min: 0.1,
        max: 20.0
      }
    };

    CarbohydratesUnit.prototype.getCurrentMin = function() {
      return this.getUnit().min;
    };

    CarbohydratesUnit.prototype.getCurrentMax = function() {
      return this.getUnit().max;
    };

    CarbohydratesUnit.prototype.getInsulinPerCarbohydratesDefault = function() {
      return this.getUnit().insulinPerCarbohydrates["default"];
    };

    CarbohydratesUnit.prototype.getInsulinPerCarbohydratesStep = function() {
      return this.getUnit().insulinPerCarbohydrates.step;
    };

    CarbohydratesUnit.prototype.getInsulinPerCarbohydratesMin = function() {
      return this.getUnit().insulinPerCarbohydrates.min;
    };

    CarbohydratesUnit.prototype.getInsulinPerCarbohydratesMax = function() {
      return this.getUnit().insulinPerCarbohydrates.max;
    };

    return CarbohydratesUnit;

  })(UnitStorageData);

  carbohydratesUnit = new CarbohydratesUnit("CarbohydratesUnit", CarbohydratesUnit.MG_12);

  DataLine = (function() {
    function DataLine(glucoseMinimal, glucoseMaximal, insulinPerCarbohydrates, glucosePerInsulin, glucosePerCarbohydrates) {
      this.glucoseMinimal = glucoseMinimal;
      this.glucoseMaximal = glucoseMaximal;
      this.insulinPerCarbohydrates = insulinPerCarbohydrates;
      this.glucosePerInsulin = glucosePerInsulin;
      this.glucosePerCarbohydrates = glucosePerCarbohydrates;
    }

    DataLine.prototype.correctionMinimum = function(g) {
      if (g < this.glucoseMinimal) {
        return 0.0;
      } else {
        return (g - this.glucoseMinimal) / this.glucosePerInsulin;
      }
    };

    DataLine.prototype.correctionMaximum = function(g) {
      if (g < this.glucoseMaximal) {
        return 0.0;
      } else {
        return (g - this.glucoseMaximal) / this.glucosePerInsulin;
      }
    };

    DataLine.prototype.bolus = function(c) {
      return c * this.insulinPerCarbohydrates;
    };

    DataLine.prototype.calculate = function(g, c) {
      return [this.correctionMinimum(g) + this.bolus(c), this.correctionMaximum(g) + this.bolus(c)];
    };

    DataLine.prototype.comeOut = function(g, c, i) {
      return Math.round(g - Math.max(0, i - this.bolus(c)) * this.glucosePerInsulin + Math.max(0, this.bolus(c) - i) / this.insulinPerCarbohydrates * this.glucosePerCarbohydrates);
    };

    DataLine.prototype.proposeInsulin = function(g, c) {
      if (g < this.glucoseMinimal && c > 0) {
        c = Math.max(0, c - ((this.glucoseMinimal - g) / this.glucosePerCarbohydrates));
      }
      return Math.floor(this.correctionMinimum(g) + this.bolus(c));
    };

    DataLine.prototype.proposeCarbohydrates = function(g) {
      return Math.abs(Math.min(0.0, (g - this.glucoseMinimal) / this.glucosePerCarbohydrates));
    };

    DataLine.prototype.switchGlucoseUnit = function(glucoseUnit) {
      this.glucoseMinimal = glucoseUnit["switch"](glucoseUnit, this.glucoseMinimal);
      this.glucoseMaximal = glucoseUnit["switch"](glucoseUnit, this.glucoseMaximal);
      this.glucosePerInsulin = glucoseUnit["switch"](glucoseUnit, this.glucosePerInsulin);
      return this.glucosePerCarbohydrates = glucoseUnit["switch"](glucoseUnit, this.glucosePerCarbohydrates);
    };

    DataLine.prototype.switchCarbohydratesUnit = function(carbohydratesUnit) {
      return this.insulinPerCarbohydrates = 1.0;
    };

    return DataLine;

  })();

  DataLinesStorage = (function(_super) {
    var _i, _results;

    __extends(DataLinesStorage, _super);

    DataLinesStorage.HOURS = (function() {
      _results = [];
      for (_i = 0; _i <= 23; _i++){ _results.push(_i); }
      return _results;
    }).apply(this);

    function DataLinesStorage() {
      var i;
      DataLinesStorage.__super__.constructor.call(this, "DataLinesStorage", {
        creationTime: Datex.currentTime(),
        initialized: false,
        dataLines: (function() {
          var _j, _len, _ref, _results1;
          _ref = DataLinesStorage.HOURS;
          _results1 = [];
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            i = _ref[_j];
            _results1.push(new DataLine(80, 160, 1, 75, 85));
          }
          return _results1;
        })()
      });
    }

    DataLinesStorage.prototype.load = function() {
      DataLinesStorage.__super__.load.apply(this, arguments);
      return this.objectifyDataLines();
    };

    DataLinesStorage.prototype.objectifyDataLines = function() {
      var i;
      return this.data.dataLines = (function() {
        var _j, _len, _ref, _results1;
        _ref = this.data.dataLines;
        _results1 = [];
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          i = _ref[_j];
          _results1.push(new DataLine(i.glucoseMinimal, i.glucoseMaximal, i.insulinPerCarbohydrates, i.glucosePerInsulin, i.glucosePerCarbohydrates));
        }
        return _results1;
      }).call(this);
    };

    DataLinesStorage.prototype.isInitialized = function() {
      return this.data.initialized;
    };

    DataLinesStorage.prototype.dataLine = function(hour) {
      return this.data.dataLines[hour];
    };

    DataLinesStorage.prototype.currentDataLine = function() {
      return this.dataLine(Datex.currentHour());
    };

    DataLinesStorage.prototype.initialize = function() {
      var i;
      this.data.initialized = true;
      this.data.dataLines = (function() {
        var _j, _len, _ref, _results1;
        _ref = DataLinesStorage.HOURS;
        _results1 = [];
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          i = _ref[_j];
          _results1.push(this.createDataLine());
        }
        return _results1;
      }).call(this);
      return this.save();
    };

    DataLinesStorage.prototype.createDataLine = function() {
      return new DataLine(glucoseUnit.mgdlToCurrent(80), glucoseUnit.mgdlToCurrent(160), carbohydratesUnit.getInsulinPerCarbohydratesDefault(), glucoseUnit.mgdlToCurrent(75), glucoseUnit.mgdlToCurrent(85));
    };

    DataLinesStorage.prototype["export"] = function() {
      return JSON.stringify(this.data);
    };

    DataLinesStorage.prototype["import"] = function(data) {
      var exception;
      try {
        this.data = JSON.parse(data);
        return this.objectifyDataLines();
      } catch (_error) {
        exception = _error;
        return alert(exception);
      }
    };

    return DataLinesStorage;

  })(StorageData);

  DataLinesStorage = new DataLinesStorage();

  Polymerase.setup("bp-bolus", {
    onDomReady: function() {
      return this.nextStep();
    },
    nextStep: function() {
      if (!languageUnit.isSelected()) {
        return this.$.chooseLanguageUnitDialog.opened = true;
      } else if (!disclaimerUnit.isSelected()) {
        return this.$.disclaimerDialog.opened = true;
      } else if (!glucoseUnit.isSelected()) {
        return this.$.chooseGlucoseUnitDialog.opened = true;
      } else if (!carbohydratesUnit.isSelected()) {
        return this.$.chooseCarbohydratesUnitDialog.opened = true;
      } else if (!DataLinesStorage.isInitialized()) {
        DataLinesStorage.initialize();
        return window.location.reload();
      } else {
        return this.startUsage();
      }
    },
    startUsage: function() {
      this.carbohydrates = 0;
      this.glucose = glucoseUnit.mgdlToCurrent(120);
      this.editHour = Datex.currentHour();
      return this.compute();
    },
    selectAction: function(event, detail, target) {
      return this.$.pages.selected = event.target.getAttribute('num');
    },
    chooseLanguage: function(event, detail, target) {
      var languageId;
      languageId = event.target.getAttribute('language-id');
      languageUnit.setUnit(UnitStorageData.asUnit(languageId));
      return window.location.reload();
    },
    chooseMoreInfo: function() {
      return window.location.href = "http://stephan-james.github.io/bolus-project/application/#more-info";
    },
    chooseDecline: function() {
      return window.location.href = "http://stephan-james.github.io/bolus-project/application/#declined";
    },
    chooseAccept: function() {
      disclaimerUnit.setUnit(null);
      return this.nextStep();
    },
    chooseMmolPerL: function() {
      return this.chooseGlucoseUnit(GlucoseUnit.MMOL_L);
    },
    chooseMgPerDl: function() {
      return this.chooseGlucoseUnit(GlucoseUnit.MG_DL);
    },
    chooseGlucoseUnit: function(unit) {
      glucoseUnit.setUnit(unit);
      return this.nextStep();
    },
    chooseMG1: function() {
      return this.chooseCarbohydratesUnit(CarbohydratesUnit.MG_1);
    },
    chooseMG10: function() {
      return this.chooseCarbohydratesUnit(CarbohydratesUnit.MG_10);
    },
    chooseMG12: function() {
      return this.chooseCarbohydratesUnit(CarbohydratesUnit.MG_12);
    },
    chooseCarbohydratesUnit: function(unit) {
      carbohydratesUnit.setUnit(unit);
      return this.nextStep();
    },
    initByEditDataLine: function() {
      var dataLine;
      dataLine = this.editDataLine();
      this.glucoseMinimal = dataLine.glucoseMinimal;
      this.glucoseMaximal = dataLine.glucoseMaximal;
      this.insulinPerCarbohydrates = dataLine.insulinPerCarbohydrates;
      this.glucosePerInsulin = dataLine.glucosePerInsulin;
      return this.glucosePerCarbohydrates = dataLine.glucosePerCarbohydrates;
    },
    editDataLine: function() {
      return DataLinesStorage.dataLine(this.editHour);
    },
    proposalInsulin: 0,
    proposalGlucose: glucoseUnit.mgdlToCurrent(120),
    proposalCarbohydrates: 0,
    editHour: 0,
    editHourChanged: function() {
      return this.compute();
    },
    editHourStep: 1,
    editHourMin: 0,
    editHourMax: 23,
    glucoseMinimal: DataLinesStorage.currentDataLine().glucoseMinimal,
    glucoseMinimalChanged: function() {
      return this.save();
    },
    glucoseMinimalStep: glucoseUnit.getCurrentStep(),
    glucoseMinimalMin: glucoseUnit.mgdlToCurrent(70),
    glucoseMinimalMax: glucoseUnit.mgdlToCurrent(200),
    glucoseMaximal: DataLinesStorage.currentDataLine().glucoseMaximal,
    glucoseMaximalChanged: function() {
      return this.save();
    },
    insulinPerCarbohydrates: DataLinesStorage.currentDataLine().insulinPerCarbohydrates,
    insulinPerCarbohydratesChanged: function() {
      return this.save();
    },
    insulinPerCarbohydratesStep: carbohydratesUnit.getInsulinPerCarbohydratesStep(),
    insulinPerCarbohydratesMin: carbohydratesUnit.getInsulinPerCarbohydratesMin(),
    insulinPerCarbohydratesMax: carbohydratesUnit.getInsulinPerCarbohydratesMax(),
    glucosePerInsulin: DataLinesStorage.currentDataLine().glucosePerInsulin,
    glucosePerInsulinChanged: function() {
      return this.save();
    },
    glucosePerInsulinStep: glucoseUnit.getCurrentStep(),
    glucosePerInsulinMin: glucoseUnit.mgdlToCurrent(5),
    glucosePerInsulinMax: glucoseUnit.mgdlToCurrent(250),
    glucosePerCarbohydrates: DataLinesStorage.currentDataLine().glucosePerCarbohydrates,
    glucosePerCarbohydratesChanged: function() {
      return this.save();
    },
    glucosePerCarbohydratesStep: glucoseUnit.getCurrentStep(),
    glucosePerCarbohydratesMin: glucoseUnit.mgdlToCurrent(5),
    glucosePerCarbohydratesMax: glucoseUnit.mgdlToCurrent(250),
    glucose: glucoseUnit.mgdlToCurrent(120),
    glucoseChanged: function() {
      return this.compute();
    },
    glucoseStep: glucoseUnit.getCurrentStep(),
    glucoseMin: glucoseUnit.mgdlToCurrent(5),
    glucoseMax: glucoseUnit.mgdlToCurrent(350),
    carbohydrates: 0,
    carbohydratesChanged: function() {
      return this.compute();
    },
    carbohydratesStep: carbohydratesUnit.getCurrentStep(),
    carbohydratesMin: carbohydratesUnit.getCurrentMin(),
    carbohydratesMax: carbohydratesUnit.getCurrentMax(),
    labels: {
      editHour: "" + (languageUnit.getText('editHour')) + " [" + (languageUnit.getText('hour')) + "]",
      glucoseMinimum: "" + (languageUnit.getText('glucoseMinimum')) + " [" + (glucoseUnit.getId()) + "]",
      insulinPerCarbohydrates: "" + (languageUnit.getText('insulinPerCarbohydrates')) + " [ie]",
      glucosePerInsulin: "" + (languageUnit.getText('glucosePerInsulin')) + " [" + (glucoseUnit.getId()) + "]",
      glucosePerCarbohydrates: "" + (languageUnit.getText('glucosePerCarbohydrates')) + " [" + (glucoseUnit.getId()) + "]",
      glucose: "" + (languageUnit.getText('glucose')) + " [" + (glucoseUnit.getId()) + "]",
      carbohydrates: "" + (languageUnit.getText('carbohydrates')) + " [" + (carbohydratesUnit.getId()) + "]"
    },
    text: function(code) {
      return languageUnit.getText(code);
    },
    languageIds: LanguageUnit.getLanguageIds(),
    compute: function() {
      var dataLine, maximal, minimal, _ref;
      if (!this.isDomReady()) {
        return;
      }
      dataLine = this.editDataLine();
      this.glucoseMinimal = dataLine.glucoseMinimal;
      this.glucoseMaximal = dataLine.glucoseMaximal;
      this.insulinPerCarbohydrates = dataLine.insulinPerCarbohydrates;
      this.glucosePerInsulin = dataLine.glucosePerInsulin;
      this.glucosePerCarbohydrates = dataLine.glucosePerCarbohydrates;
      _ref = dataLine.calculate(this.glucose, this.carbohydrates), minimal = _ref[0], maximal = _ref[1];
      this.proposalInsulin = dataLine.proposeInsulin(this.glucose, this.carbohydrates);
      this.proposalGlucose = Mathx.rounded(dataLine.comeOut(this.glucose, this.carbohydrates, this.proposalInsulin), glucoseUnit.getCurrentStep());
      this.proposalCarbohydrates = Mathx.rounded(dataLine.proposeCarbohydrates(this.glucose), 0.25);
      if (this.proposalCarbohydrates > this.carbohydrates) {
        this.carbohydrates = this.proposalCarbohydrates;
        return this.compute();
      }
    },
    save: function() {
      var dataLine;
      if (!this.isDomReady()) {
        return;
      }
      dataLine = this.editDataLine();
      dataLine.glucoseMinimal = this.glucoseMinimal;
      dataLine.glucoseMaximal = this.glucoseMaximal;
      dataLine.insulinPerCarbohydrates = this.insulinPerCarbohydrates;
      dataLine.glucosePerInsulin = this.glucosePerInsulin;
      dataLine.glucosePerCarbohydrates = this.glucosePerCarbohydrates;
      DataLinesStorage.save();
      return this.compute();
    },
    importExport: "",
    reset: function() {
      if (window.confirm("This will delete all local application data. Are you sure?")) {
        LocalStorage.clear();
        return window.location.reload();
      }
    },
    "export": function() {
      return this.$.importExportArea.value = DataLinesStorage["export"]();
    },
    "import": function() {
      DataLinesStorage["import"](this.$.importExportArea.value);
      return this.compute();
    }
  });

}).call(this);

//# sourceMappingURL=bp-bolus.js.map
